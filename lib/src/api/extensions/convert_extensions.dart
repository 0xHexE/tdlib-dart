import 'package:tdlib/td_api.dart';

extension ConvertExtensions on Map<String, dynamic> {
  TdObject? toTdObject() {
    String type = this['@type']!;
    switch (type) {
      case 'error':
        return TdError.fromJson(this);
      case 'ok':
        return Ok.fromJson(this);
      case 'tdlibParameters':
        return TdlibParameters.fromJson(this);
      case 'authenticationCodeType':
        return AuthenticationCodeType.fromJson(this);
      case 'authenticationCodeTypeTelegramMessage':
        return AuthenticationCodeTypeTelegramMessage.fromJson(this);
      case 'authenticationCodeTypeSms':
        return AuthenticationCodeTypeSms.fromJson(this);
      case 'authenticationCodeTypeCall':
        return AuthenticationCodeTypeCall.fromJson(this);
      case 'authenticationCodeTypeFlashCall':
        return AuthenticationCodeTypeFlashCall.fromJson(this);
      case 'authenticationCodeInfo':
        return AuthenticationCodeInfo.fromJson(this);
      case 'emailAddressAuthenticationCodeInfo':
        return EmailAddressAuthenticationCodeInfo.fromJson(this);
      case 'textEntity':
        return TextEntity.fromJson(this);
      case 'textEntities':
        return TextEntities.fromJson(this);
      case 'formattedText':
        return FormattedText.fromJson(this);
      case 'termsOfService':
        return TermsOfService.fromJson(this);
      case 'authorizationState':
        return AuthorizationState.fromJson(this);
      case 'authorizationStateWaitTdlibParameters':
        return AuthorizationStateWaitTdlibParameters.fromJson(this);
      case 'authorizationStateWaitEncryptionKey':
        return AuthorizationStateWaitEncryptionKey.fromJson(this);
      case 'authorizationStateWaitPhoneNumber':
        return AuthorizationStateWaitPhoneNumber.fromJson(this);
      case 'authorizationStateWaitCode':
        return AuthorizationStateWaitCode.fromJson(this);
      case 'authorizationStateWaitOtherDeviceConfirmation':
        return AuthorizationStateWaitOtherDeviceConfirmation.fromJson(this);
      case 'authorizationStateWaitRegistration':
        return AuthorizationStateWaitRegistration.fromJson(this);
      case 'authorizationStateWaitPassword':
        return AuthorizationStateWaitPassword.fromJson(this);
      case 'authorizationStateReady':
        return AuthorizationStateReady.fromJson(this);
      case 'authorizationStateLoggingOut':
        return AuthorizationStateLoggingOut.fromJson(this);
      case 'authorizationStateClosing':
        return AuthorizationStateClosing.fromJson(this);
      case 'authorizationStateClosed':
        return AuthorizationStateClosed.fromJson(this);
      case 'passwordState':
        return PasswordState.fromJson(this);
      case 'recoveryEmailAddress':
        return RecoveryEmailAddress.fromJson(this);
      case 'temporaryPasswordState':
        return TemporaryPasswordState.fromJson(this);
      case 'localFile':
        return LocalFile.fromJson(this);
      case 'remoteFile':
        return RemoteFile.fromJson(this);
      case 'file':
        return File.fromJson(this);
      case 'inputFile':
        return InputFile.fromJson(this);
      case 'inputFileId':
        return InputFileId.fromJson(this);
      case 'inputFileRemote':
        return InputFileRemote.fromJson(this);
      case 'inputFileLocal':
        return InputFileLocal.fromJson(this);
      case 'inputFileGenerated':
        return InputFileGenerated.fromJson(this);
      case 'photoSize':
        return PhotoSize.fromJson(this);
      case 'minithumbnail':
        return Minithumbnail.fromJson(this);
      case 'thumbnailFormat':
        return ThumbnailFormat.fromJson(this);
      case 'thumbnailFormatJpeg':
        return ThumbnailFormatJpeg.fromJson(this);
      case 'thumbnailFormatPng':
        return ThumbnailFormatPng.fromJson(this);
      case 'thumbnailFormatWebp':
        return ThumbnailFormatWebp.fromJson(this);
      case 'thumbnailFormatGif':
        return ThumbnailFormatGif.fromJson(this);
      case 'thumbnailFormatTgs':
        return ThumbnailFormatTgs.fromJson(this);
      case 'thumbnailFormatMpeg4':
        return ThumbnailFormatMpeg4.fromJson(this);
      case 'thumbnail':
        return Thumbnail.fromJson(this);
      case 'maskPoint':
        return MaskPoint.fromJson(this);
      case 'maskPointForehead':
        return MaskPointForehead.fromJson(this);
      case 'maskPointEyes':
        return MaskPointEyes.fromJson(this);
      case 'maskPointMouth':
        return MaskPointMouth.fromJson(this);
      case 'maskPointChin':
        return MaskPointChin.fromJson(this);
      case 'maskPosition':
        return MaskPosition.fromJson(this);
      case 'closedVectorPath':
        return ClosedVectorPath.fromJson(this);
      case 'pollOption':
        return PollOption.fromJson(this);
      case 'pollType':
        return PollType.fromJson(this);
      case 'pollTypeRegular':
        return PollTypeRegular.fromJson(this);
      case 'pollTypeQuiz':
        return PollTypeQuiz.fromJson(this);
      case 'animation':
        return Animation.fromJson(this);
      case 'audio':
        return Audio.fromJson(this);
      case 'document':
        return Document.fromJson(this);
      case 'photo':
        return Photo.fromJson(this);
      case 'sticker':
        return Sticker.fromJson(this);
      case 'video':
        return Video.fromJson(this);
      case 'videoNote':
        return VideoNote.fromJson(this);
      case 'voiceNote':
        return VoiceNote.fromJson(this);
      case 'contact':
        return Contact.fromJson(this);
      case 'location':
        return Location.fromJson(this);
      case 'venue':
        return Venue.fromJson(this);
      case 'game':
        return Game.fromJson(this);
      case 'poll':
        return Poll.fromJson(this);
      case 'profilePhoto':
        return ProfilePhoto.fromJson(this);
      case 'chatPhotoInfo':
        return ChatPhotoInfo.fromJson(this);
      case 'userType':
        return UserType.fromJson(this);
      case 'userTypeRegular':
        return UserTypeRegular.fromJson(this);
      case 'userTypeDeleted':
        return UserTypeDeleted.fromJson(this);
      case 'userTypeBot':
        return UserTypeBot.fromJson(this);
      case 'userTypeUnknown':
        return UserTypeUnknown.fromJson(this);
      case 'botCommand':
        return BotCommand.fromJson(this);
      case 'botInfo':
        return BotInfo.fromJson(this);
      case 'chatLocation':
        return ChatLocation.fromJson(this);
      case 'animatedChatPhoto':
        return AnimatedChatPhoto.fromJson(this);
      case 'chatPhoto':
        return ChatPhoto.fromJson(this);
      case 'chatPhotos':
        return ChatPhotos.fromJson(this);
      case 'inputChatPhoto':
        return InputChatPhoto.fromJson(this);
      case 'inputChatPhotoPrevious':
        return InputChatPhotoPrevious.fromJson(this);
      case 'inputChatPhotoStatic':
        return InputChatPhotoStatic.fromJson(this);
      case 'inputChatPhotoAnimation':
        return InputChatPhotoAnimation.fromJson(this);
      case 'user':
        return User.fromJson(this);
      case 'userFullInfo':
        return UserFullInfo.fromJson(this);
      case 'users':
        return Users.fromJson(this);
      case 'chatAdministrator':
        return ChatAdministrator.fromJson(this);
      case 'chatAdministrators':
        return ChatAdministrators.fromJson(this);
      case 'chatPermissions':
        return ChatPermissions.fromJson(this);
      case 'chatMemberStatus':
        return ChatMemberStatus.fromJson(this);
      case 'chatMemberStatusCreator':
        return ChatMemberStatusCreator.fromJson(this);
      case 'chatMemberStatusAdministrator':
        return ChatMemberStatusAdministrator.fromJson(this);
      case 'chatMemberStatusMember':
        return ChatMemberStatusMember.fromJson(this);
      case 'chatMemberStatusRestricted':
        return ChatMemberStatusRestricted.fromJson(this);
      case 'chatMemberStatusLeft':
        return ChatMemberStatusLeft.fromJson(this);
      case 'chatMemberStatusBanned':
        return ChatMemberStatusBanned.fromJson(this);
      case 'chatMember':
        return ChatMember.fromJson(this);
      case 'chatMembers':
        return ChatMembers.fromJson(this);
      case 'chatMembersFilter':
        return ChatMembersFilter.fromJson(this);
      case 'chatMembersFilterContacts':
        return ChatMembersFilterContacts.fromJson(this);
      case 'chatMembersFilterAdministrators':
        return ChatMembersFilterAdministrators.fromJson(this);
      case 'chatMembersFilterMembers':
        return ChatMembersFilterMembers.fromJson(this);
      case 'chatMembersFilterMention':
        return ChatMembersFilterMention.fromJson(this);
      case 'chatMembersFilterRestricted':
        return ChatMembersFilterRestricted.fromJson(this);
      case 'chatMembersFilterBanned':
        return ChatMembersFilterBanned.fromJson(this);
      case 'chatMembersFilterBots':
        return ChatMembersFilterBots.fromJson(this);
      case 'supergroupMembersFilter':
        return SupergroupMembersFilter.fromJson(this);
      case 'supergroupMembersFilterRecent':
        return SupergroupMembersFilterRecent.fromJson(this);
      case 'supergroupMembersFilterContacts':
        return SupergroupMembersFilterContacts.fromJson(this);
      case 'supergroupMembersFilterAdministrators':
        return SupergroupMembersFilterAdministrators.fromJson(this);
      case 'supergroupMembersFilterSearch':
        return SupergroupMembersFilterSearch.fromJson(this);
      case 'supergroupMembersFilterRestricted':
        return SupergroupMembersFilterRestricted.fromJson(this);
      case 'supergroupMembersFilterBanned':
        return SupergroupMembersFilterBanned.fromJson(this);
      case 'supergroupMembersFilterMention':
        return SupergroupMembersFilterMention.fromJson(this);
      case 'supergroupMembersFilterBots':
        return SupergroupMembersFilterBots.fromJson(this);
      case 'chatInviteLink':
        return ChatInviteLink.fromJson(this);
      case 'chatInviteLinks':
        return ChatInviteLinks.fromJson(this);
      case 'chatInviteLinkCount':
        return ChatInviteLinkCount.fromJson(this);
      case 'chatInviteLinkCounts':
        return ChatInviteLinkCounts.fromJson(this);
      case 'chatInviteLinkMember':
        return ChatInviteLinkMember.fromJson(this);
      case 'chatInviteLinkMembers':
        return ChatInviteLinkMembers.fromJson(this);
      case 'chatInviteLinkInfo':
        return ChatInviteLinkInfo.fromJson(this);
      case 'basicGroup':
        return BasicGroup.fromJson(this);
      case 'basicGroupFullInfo':
        return BasicGroupFullInfo.fromJson(this);
      case 'supergroup':
        return Supergroup.fromJson(this);
      case 'supergroupFullInfo':
        return SupergroupFullInfo.fromJson(this);
      case 'secretChatState':
        return SecretChatState.fromJson(this);
      case 'secretChatStatePending':
        return SecretChatStatePending.fromJson(this);
      case 'secretChatStateReady':
        return SecretChatStateReady.fromJson(this);
      case 'secretChatStateClosed':
        return SecretChatStateClosed.fromJson(this);
      case 'secretChat':
        return SecretChat.fromJson(this);
      case 'messageSender':
        return MessageSender.fromJson(this);
      case 'messageSenderUser':
        return MessageSenderUser.fromJson(this);
      case 'messageSenderChat':
        return MessageSenderChat.fromJson(this);
      case 'messageSenders':
        return MessageSenders.fromJson(this);
      case 'messageForwardOrigin':
        return MessageForwardOrigin.fromJson(this);
      case 'messageForwardOriginUser':
        return MessageForwardOriginUser.fromJson(this);
      case 'messageForwardOriginChat':
        return MessageForwardOriginChat.fromJson(this);
      case 'messageForwardOriginHiddenUser':
        return MessageForwardOriginHiddenUser.fromJson(this);
      case 'messageForwardOriginChannel':
        return MessageForwardOriginChannel.fromJson(this);
      case 'messageForwardOriginMessageImport':
        return MessageForwardOriginMessageImport.fromJson(this);
      case 'messageForwardInfo':
        return MessageForwardInfo.fromJson(this);
      case 'messageReplyInfo':
        return MessageReplyInfo.fromJson(this);
      case 'messageInteractionInfo':
        return MessageInteractionInfo.fromJson(this);
      case 'messageSendingState':
        return MessageSendingState.fromJson(this);
      case 'messageSendingStatePending':
        return MessageSendingStatePending.fromJson(this);
      case 'messageSendingStateFailed':
        return MessageSendingStateFailed.fromJson(this);
      case 'message':
        return Message.fromJson(this);
      case 'messages':
        return Messages.fromJson(this);
      case 'foundMessages':
        return FoundMessages.fromJson(this);
      case 'notificationSettingsScope':
        return NotificationSettingsScope.fromJson(this);
      case 'notificationSettingsScopePrivateChats':
        return NotificationSettingsScopePrivateChats.fromJson(this);
      case 'notificationSettingsScopeGroupChats':
        return NotificationSettingsScopeGroupChats.fromJson(this);
      case 'notificationSettingsScopeChannelChats':
        return NotificationSettingsScopeChannelChats.fromJson(this);
      case 'chatNotificationSettings':
        return ChatNotificationSettings.fromJson(this);
      case 'scopeNotificationSettings':
        return ScopeNotificationSettings.fromJson(this);
      case 'draftMessage':
        return DraftMessage.fromJson(this);
      case 'chatType':
        return ChatType.fromJson(this);
      case 'chatTypePrivate':
        return ChatTypePrivate.fromJson(this);
      case 'chatTypeBasicGroup':
        return ChatTypeBasicGroup.fromJson(this);
      case 'chatTypeSupergroup':
        return ChatTypeSupergroup.fromJson(this);
      case 'chatTypeSecret':
        return ChatTypeSecret.fromJson(this);
      case 'chatFilter':
        return ChatFilter.fromJson(this);
      case 'chatFilterInfo':
        return ChatFilterInfo.fromJson(this);
      case 'recommendedChatFilter':
        return RecommendedChatFilter.fromJson(this);
      case 'recommendedChatFilters':
        return RecommendedChatFilters.fromJson(this);
      case 'chatList':
        return ChatList.fromJson(this);
      case 'chatListMain':
        return ChatListMain.fromJson(this);
      case 'chatListArchive':
        return ChatListArchive.fromJson(this);
      case 'chatListFilter':
        return ChatListFilter.fromJson(this);
      case 'chatLists':
        return ChatLists.fromJson(this);
      case 'chatSource':
        return ChatSource.fromJson(this);
      case 'chatSourceMtprotoProxy':
        return ChatSourceMtprotoProxy.fromJson(this);
      case 'chatSourcePublicServiceAnnouncement':
        return ChatSourcePublicServiceAnnouncement.fromJson(this);
      case 'chatPosition':
        return ChatPosition.fromJson(this);
      case 'voiceChat':
        return VoiceChat.fromJson(this);
      case 'chat':
        return Chat.fromJson(this);
      case 'chats':
        return Chats.fromJson(this);
      case 'chatNearby':
        return ChatNearby.fromJson(this);
      case 'chatsNearby':
        return ChatsNearby.fromJson(this);
      case 'publicChatType':
        return PublicChatType.fromJson(this);
      case 'publicChatTypeHasUsername':
        return PublicChatTypeHasUsername.fromJson(this);
      case 'publicChatTypeIsLocationBased':
        return PublicChatTypeIsLocationBased.fromJson(this);
      case 'chatActionBar':
        return ChatActionBar.fromJson(this);
      case 'chatActionBarReportSpam':
        return ChatActionBarReportSpam.fromJson(this);
      case 'chatActionBarReportUnrelatedLocation':
        return ChatActionBarReportUnrelatedLocation.fromJson(this);
      case 'chatActionBarInviteMembers':
        return ChatActionBarInviteMembers.fromJson(this);
      case 'chatActionBarReportAddBlock':
        return ChatActionBarReportAddBlock.fromJson(this);
      case 'chatActionBarAddContact':
        return ChatActionBarAddContact.fromJson(this);
      case 'chatActionBarSharePhoneNumber':
        return ChatActionBarSharePhoneNumber.fromJson(this);
      case 'keyboardButtonType':
        return KeyboardButtonType.fromJson(this);
      case 'keyboardButtonTypeText':
        return KeyboardButtonTypeText.fromJson(this);
      case 'keyboardButtonTypeRequestPhoneNumber':
        return KeyboardButtonTypeRequestPhoneNumber.fromJson(this);
      case 'keyboardButtonTypeRequestLocation':
        return KeyboardButtonTypeRequestLocation.fromJson(this);
      case 'keyboardButtonTypeRequestPoll':
        return KeyboardButtonTypeRequestPoll.fromJson(this);
      case 'keyboardButton':
        return KeyboardButton.fromJson(this);
      case 'inlineKeyboardButtonType':
        return InlineKeyboardButtonType.fromJson(this);
      case 'inlineKeyboardButtonTypeUrl':
        return InlineKeyboardButtonTypeUrl.fromJson(this);
      case 'inlineKeyboardButtonTypeLoginUrl':
        return InlineKeyboardButtonTypeLoginUrl.fromJson(this);
      case 'inlineKeyboardButtonTypeCallback':
        return InlineKeyboardButtonTypeCallback.fromJson(this);
      case 'inlineKeyboardButtonTypeCallbackWithPassword':
        return InlineKeyboardButtonTypeCallbackWithPassword.fromJson(this);
      case 'inlineKeyboardButtonTypeCallbackGame':
        return InlineKeyboardButtonTypeCallbackGame.fromJson(this);
      case 'inlineKeyboardButtonTypeSwitchInline':
        return InlineKeyboardButtonTypeSwitchInline.fromJson(this);
      case 'inlineKeyboardButtonTypeBuy':
        return InlineKeyboardButtonTypeBuy.fromJson(this);
      case 'inlineKeyboardButton':
        return InlineKeyboardButton.fromJson(this);
      case 'replyMarkup':
        return ReplyMarkup.fromJson(this);
      case 'replyMarkupRemoveKeyboard':
        return ReplyMarkupRemoveKeyboard.fromJson(this);
      case 'replyMarkupForceReply':
        return ReplyMarkupForceReply.fromJson(this);
      case 'replyMarkupShowKeyboard':
        return ReplyMarkupShowKeyboard.fromJson(this);
      case 'replyMarkupInlineKeyboard':
        return ReplyMarkupInlineKeyboard.fromJson(this);
      case 'loginUrlInfo':
        return LoginUrlInfo.fromJson(this);
      case 'loginUrlInfoOpen':
        return LoginUrlInfoOpen.fromJson(this);
      case 'loginUrlInfoRequestConfirmation':
        return LoginUrlInfoRequestConfirmation.fromJson(this);
      case 'messageThreadInfo':
        return MessageThreadInfo.fromJson(this);
      case 'richText':
        return RichText.fromJson(this);
      case 'richTextPlain':
        return RichTextPlain.fromJson(this);
      case 'richTextBold':
        return RichTextBold.fromJson(this);
      case 'richTextItalic':
        return RichTextItalic.fromJson(this);
      case 'richTextUnderline':
        return RichTextUnderline.fromJson(this);
      case 'richTextStrikethrough':
        return RichTextStrikethrough.fromJson(this);
      case 'richTextFixed':
        return RichTextFixed.fromJson(this);
      case 'richTextUrl':
        return RichTextUrl.fromJson(this);
      case 'richTextEmailAddress':
        return RichTextEmailAddress.fromJson(this);
      case 'richTextSubscript':
        return RichTextSubscript.fromJson(this);
      case 'richTextSuperscript':
        return RichTextSuperscript.fromJson(this);
      case 'richTextMarked':
        return RichTextMarked.fromJson(this);
      case 'richTextPhoneNumber':
        return RichTextPhoneNumber.fromJson(this);
      case 'richTextIcon':
        return RichTextIcon.fromJson(this);
      case 'richTextReference':
        return RichTextReference.fromJson(this);
      case 'richTextAnchor':
        return RichTextAnchor.fromJson(this);
      case 'richTextAnchorLink':
        return RichTextAnchorLink.fromJson(this);
      case 'richTexts':
        return RichTexts.fromJson(this);
      case 'pageBlockCaption':
        return PageBlockCaption.fromJson(this);
      case 'pageBlockListItem':
        return PageBlockListItem.fromJson(this);
      case 'pageBlockHorizontalAlignment':
        return PageBlockHorizontalAlignment.fromJson(this);
      case 'pageBlockHorizontalAlignmentLeft':
        return PageBlockHorizontalAlignmentLeft.fromJson(this);
      case 'pageBlockHorizontalAlignmentCenter':
        return PageBlockHorizontalAlignmentCenter.fromJson(this);
      case 'pageBlockHorizontalAlignmentRight':
        return PageBlockHorizontalAlignmentRight.fromJson(this);
      case 'pageBlockVerticalAlignment':
        return PageBlockVerticalAlignment.fromJson(this);
      case 'pageBlockVerticalAlignmentTop':
        return PageBlockVerticalAlignmentTop.fromJson(this);
      case 'pageBlockVerticalAlignmentMiddle':
        return PageBlockVerticalAlignmentMiddle.fromJson(this);
      case 'pageBlockVerticalAlignmentBottom':
        return PageBlockVerticalAlignmentBottom.fromJson(this);
      case 'pageBlockTableCell':
        return PageBlockTableCell.fromJson(this);
      case 'pageBlockRelatedArticle':
        return PageBlockRelatedArticle.fromJson(this);
      case 'pageBlock':
        return PageBlock.fromJson(this);
      case 'pageBlockTitle':
        return PageBlockTitle.fromJson(this);
      case 'pageBlockSubtitle':
        return PageBlockSubtitle.fromJson(this);
      case 'pageBlockAuthorDate':
        return PageBlockAuthorDate.fromJson(this);
      case 'pageBlockHeader':
        return PageBlockHeader.fromJson(this);
      case 'pageBlockSubheader':
        return PageBlockSubheader.fromJson(this);
      case 'pageBlockKicker':
        return PageBlockKicker.fromJson(this);
      case 'pageBlockParagraph':
        return PageBlockParagraph.fromJson(this);
      case 'pageBlockPreformatted':
        return PageBlockPreformatted.fromJson(this);
      case 'pageBlockFooter':
        return PageBlockFooter.fromJson(this);
      case 'pageBlockDivider':
        return PageBlockDivider.fromJson(this);
      case 'pageBlockAnchor':
        return PageBlockAnchor.fromJson(this);
      case 'pageBlockList':
        return PageBlockList.fromJson(this);
      case 'pageBlockBlockQuote':
        return PageBlockBlockQuote.fromJson(this);
      case 'pageBlockPullQuote':
        return PageBlockPullQuote.fromJson(this);
      case 'pageBlockAnimation':
        return PageBlockAnimation.fromJson(this);
      case 'pageBlockAudio':
        return PageBlockAudio.fromJson(this);
      case 'pageBlockPhoto':
        return PageBlockPhoto.fromJson(this);
      case 'pageBlockVideo':
        return PageBlockVideo.fromJson(this);
      case 'pageBlockVoiceNote':
        return PageBlockVoiceNote.fromJson(this);
      case 'pageBlockCover':
        return PageBlockCover.fromJson(this);
      case 'pageBlockEmbedded':
        return PageBlockEmbedded.fromJson(this);
      case 'pageBlockEmbeddedPost':
        return PageBlockEmbeddedPost.fromJson(this);
      case 'pageBlockCollage':
        return PageBlockCollage.fromJson(this);
      case 'pageBlockSlideshow':
        return PageBlockSlideshow.fromJson(this);
      case 'pageBlockChatLink':
        return PageBlockChatLink.fromJson(this);
      case 'pageBlockTable':
        return PageBlockTable.fromJson(this);
      case 'pageBlockDetails':
        return PageBlockDetails.fromJson(this);
      case 'pageBlockRelatedArticles':
        return PageBlockRelatedArticles.fromJson(this);
      case 'pageBlockMap':
        return PageBlockMap.fromJson(this);
      case 'webPageInstantView':
        return WebPageInstantView.fromJson(this);
      case 'webPage':
        return WebPage.fromJson(this);
      case 'countryInfo':
        return CountryInfo.fromJson(this);
      case 'countries':
        return Countries.fromJson(this);
      case 'phoneNumberInfo':
        return PhoneNumberInfo.fromJson(this);
      case 'bankCardActionOpenUrl':
        return BankCardActionOpenUrl.fromJson(this);
      case 'bankCardInfo':
        return BankCardInfo.fromJson(this);
      case 'address':
        return Address.fromJson(this);
      case 'labeledPricePart':
        return LabeledPricePart.fromJson(this);
      case 'invoice':
        return Invoice.fromJson(this);
      case 'orderInfo':
        return OrderInfo.fromJson(this);
      case 'shippingOption':
        return ShippingOption.fromJson(this);
      case 'savedCredentials':
        return SavedCredentials.fromJson(this);
      case 'inputCredentials':
        return InputCredentials.fromJson(this);
      case 'inputCredentialsSaved':
        return InputCredentialsSaved.fromJson(this);
      case 'inputCredentialsNew':
        return InputCredentialsNew.fromJson(this);
      case 'inputCredentialsApplePay':
        return InputCredentialsApplePay.fromJson(this);
      case 'inputCredentialsGooglePay':
        return InputCredentialsGooglePay.fromJson(this);
      case 'paymentsProviderStripe':
        return PaymentsProviderStripe.fromJson(this);
      case 'paymentForm':
        return PaymentForm.fromJson(this);
      case 'validatedOrderInfo':
        return ValidatedOrderInfo.fromJson(this);
      case 'paymentResult':
        return PaymentResult.fromJson(this);
      case 'paymentReceipt':
        return PaymentReceipt.fromJson(this);
      case 'datedFile':
        return DatedFile.fromJson(this);
      case 'passportElementType':
        return PassportElementType.fromJson(this);
      case 'passportElementTypePersonalDetails':
        return PassportElementTypePersonalDetails.fromJson(this);
      case 'passportElementTypePassport':
        return PassportElementTypePassport.fromJson(this);
      case 'passportElementTypeDriverLicense':
        return PassportElementTypeDriverLicense.fromJson(this);
      case 'passportElementTypeIdentityCard':
        return PassportElementTypeIdentityCard.fromJson(this);
      case 'passportElementTypeInternalPassport':
        return PassportElementTypeInternalPassport.fromJson(this);
      case 'passportElementTypeAddress':
        return PassportElementTypeAddress.fromJson(this);
      case 'passportElementTypeUtilityBill':
        return PassportElementTypeUtilityBill.fromJson(this);
      case 'passportElementTypeBankStatement':
        return PassportElementTypeBankStatement.fromJson(this);
      case 'passportElementTypeRentalAgreement':
        return PassportElementTypeRentalAgreement.fromJson(this);
      case 'passportElementTypePassportRegistration':
        return PassportElementTypePassportRegistration.fromJson(this);
      case 'passportElementTypeTemporaryRegistration':
        return PassportElementTypeTemporaryRegistration.fromJson(this);
      case 'passportElementTypePhoneNumber':
        return PassportElementTypePhoneNumber.fromJson(this);
      case 'passportElementTypeEmailAddress':
        return PassportElementTypeEmailAddress.fromJson(this);
      case 'date':
        return Date.fromJson(this);
      case 'personalDetails':
        return PersonalDetails.fromJson(this);
      case 'identityDocument':
        return IdentityDocument.fromJson(this);
      case 'inputIdentityDocument':
        return InputIdentityDocument.fromJson(this);
      case 'personalDocument':
        return PersonalDocument.fromJson(this);
      case 'inputPersonalDocument':
        return InputPersonalDocument.fromJson(this);
      case 'passportElement':
        return PassportElement.fromJson(this);
      case 'passportElementPersonalDetails':
        return PassportElementPersonalDetails.fromJson(this);
      case 'passportElementPassport':
        return PassportElementPassport.fromJson(this);
      case 'passportElementDriverLicense':
        return PassportElementDriverLicense.fromJson(this);
      case 'passportElementIdentityCard':
        return PassportElementIdentityCard.fromJson(this);
      case 'passportElementInternalPassport':
        return PassportElementInternalPassport.fromJson(this);
      case 'passportElementAddress':
        return PassportElementAddress.fromJson(this);
      case 'passportElementUtilityBill':
        return PassportElementUtilityBill.fromJson(this);
      case 'passportElementBankStatement':
        return PassportElementBankStatement.fromJson(this);
      case 'passportElementRentalAgreement':
        return PassportElementRentalAgreement.fromJson(this);
      case 'passportElementPassportRegistration':
        return PassportElementPassportRegistration.fromJson(this);
      case 'passportElementTemporaryRegistration':
        return PassportElementTemporaryRegistration.fromJson(this);
      case 'passportElementPhoneNumber':
        return PassportElementPhoneNumber.fromJson(this);
      case 'passportElementEmailAddress':
        return PassportElementEmailAddress.fromJson(this);
      case 'inputPassportElement':
        return InputPassportElement.fromJson(this);
      case 'inputPassportElementPersonalDetails':
        return InputPassportElementPersonalDetails.fromJson(this);
      case 'inputPassportElementPassport':
        return InputPassportElementPassport.fromJson(this);
      case 'inputPassportElementDriverLicense':
        return InputPassportElementDriverLicense.fromJson(this);
      case 'inputPassportElementIdentityCard':
        return InputPassportElementIdentityCard.fromJson(this);
      case 'inputPassportElementInternalPassport':
        return InputPassportElementInternalPassport.fromJson(this);
      case 'inputPassportElementAddress':
        return InputPassportElementAddress.fromJson(this);
      case 'inputPassportElementUtilityBill':
        return InputPassportElementUtilityBill.fromJson(this);
      case 'inputPassportElementBankStatement':
        return InputPassportElementBankStatement.fromJson(this);
      case 'inputPassportElementRentalAgreement':
        return InputPassportElementRentalAgreement.fromJson(this);
      case 'inputPassportElementPassportRegistration':
        return InputPassportElementPassportRegistration.fromJson(this);
      case 'inputPassportElementTemporaryRegistration':
        return InputPassportElementTemporaryRegistration.fromJson(this);
      case 'inputPassportElementPhoneNumber':
        return InputPassportElementPhoneNumber.fromJson(this);
      case 'inputPassportElementEmailAddress':
        return InputPassportElementEmailAddress.fromJson(this);
      case 'passportElements':
        return PassportElements.fromJson(this);
      case 'passportElementErrorSource':
        return PassportElementErrorSource.fromJson(this);
      case 'passportElementErrorSourceUnspecified':
        return PassportElementErrorSourceUnspecified.fromJson(this);
      case 'passportElementErrorSourceDataField':
        return PassportElementErrorSourceDataField.fromJson(this);
      case 'passportElementErrorSourceFrontSide':
        return PassportElementErrorSourceFrontSide.fromJson(this);
      case 'passportElementErrorSourceReverseSide':
        return PassportElementErrorSourceReverseSide.fromJson(this);
      case 'passportElementErrorSourceSelfie':
        return PassportElementErrorSourceSelfie.fromJson(this);
      case 'passportElementErrorSourceTranslationFile':
        return PassportElementErrorSourceTranslationFile.fromJson(this);
      case 'passportElementErrorSourceTranslationFiles':
        return PassportElementErrorSourceTranslationFiles.fromJson(this);
      case 'passportElementErrorSourceFile':
        return PassportElementErrorSourceFile.fromJson(this);
      case 'passportElementErrorSourceFiles':
        return PassportElementErrorSourceFiles.fromJson(this);
      case 'passportElementError':
        return PassportElementError.fromJson(this);
      case 'passportSuitableElement':
        return PassportSuitableElement.fromJson(this);
      case 'passportRequiredElement':
        return PassportRequiredElement.fromJson(this);
      case 'passportAuthorizationForm':
        return PassportAuthorizationForm.fromJson(this);
      case 'passportElementsWithErrors':
        return PassportElementsWithErrors.fromJson(this);
      case 'encryptedCredentials':
        return EncryptedCredentials.fromJson(this);
      case 'encryptedPassportElement':
        return EncryptedPassportElement.fromJson(this);
      case 'inputPassportElementErrorSource':
        return InputPassportElementErrorSource.fromJson(this);
      case 'inputPassportElementErrorSourceUnspecified':
        return InputPassportElementErrorSourceUnspecified.fromJson(this);
      case 'inputPassportElementErrorSourceDataField':
        return InputPassportElementErrorSourceDataField.fromJson(this);
      case 'inputPassportElementErrorSourceFrontSide':
        return InputPassportElementErrorSourceFrontSide.fromJson(this);
      case 'inputPassportElementErrorSourceReverseSide':
        return InputPassportElementErrorSourceReverseSide.fromJson(this);
      case 'inputPassportElementErrorSourceSelfie':
        return InputPassportElementErrorSourceSelfie.fromJson(this);
      case 'inputPassportElementErrorSourceTranslationFile':
        return InputPassportElementErrorSourceTranslationFile.fromJson(this);
      case 'inputPassportElementErrorSourceTranslationFiles':
        return InputPassportElementErrorSourceTranslationFiles.fromJson(this);
      case 'inputPassportElementErrorSourceFile':
        return InputPassportElementErrorSourceFile.fromJson(this);
      case 'inputPassportElementErrorSourceFiles':
        return InputPassportElementErrorSourceFiles.fromJson(this);
      case 'inputPassportElementError':
        return InputPassportElementError.fromJson(this);
      case 'messageContent':
        return MessageContent.fromJson(this);
      case 'messageText':
        return MessageText.fromJson(this);
      case 'messageAnimation':
        return MessageAnimation.fromJson(this);
      case 'messageAudio':
        return MessageAudio.fromJson(this);
      case 'messageDocument':
        return MessageDocument.fromJson(this);
      case 'messagePhoto':
        return MessagePhoto.fromJson(this);
      case 'messageExpiredPhoto':
        return MessageExpiredPhoto.fromJson(this);
      case 'messageSticker':
        return MessageSticker.fromJson(this);
      case 'messageVideo':
        return MessageVideo.fromJson(this);
      case 'messageExpiredVideo':
        return MessageExpiredVideo.fromJson(this);
      case 'messageVideoNote':
        return MessageVideoNote.fromJson(this);
      case 'messageVoiceNote':
        return MessageVoiceNote.fromJson(this);
      case 'messageLocation':
        return MessageLocation.fromJson(this);
      case 'messageVenue':
        return MessageVenue.fromJson(this);
      case 'messageContact':
        return MessageContact.fromJson(this);
      case 'messageDice':
        return MessageDice.fromJson(this);
      case 'messageGame':
        return MessageGame.fromJson(this);
      case 'messagePoll':
        return MessagePoll.fromJson(this);
      case 'messageInvoice':
        return MessageInvoice.fromJson(this);
      case 'messageCall':
        return MessageCall.fromJson(this);
      case 'messageVoiceChatStarted':
        return MessageVoiceChatStarted.fromJson(this);
      case 'messageVoiceChatEnded':
        return MessageVoiceChatEnded.fromJson(this);
      case 'messageInviteVoiceChatParticipants':
        return MessageInviteVoiceChatParticipants.fromJson(this);
      case 'messageBasicGroupChatCreate':
        return MessageBasicGroupChatCreate.fromJson(this);
      case 'messageSupergroupChatCreate':
        return MessageSupergroupChatCreate.fromJson(this);
      case 'messageChatChangeTitle':
        return MessageChatChangeTitle.fromJson(this);
      case 'messageChatChangePhoto':
        return MessageChatChangePhoto.fromJson(this);
      case 'messageChatDeletePhoto':
        return MessageChatDeletePhoto.fromJson(this);
      case 'messageChatAddMembers':
        return MessageChatAddMembers.fromJson(this);
      case 'messageChatJoinByLink':
        return MessageChatJoinByLink.fromJson(this);
      case 'messageChatDeleteMember':
        return MessageChatDeleteMember.fromJson(this);
      case 'messageChatUpgradeTo':
        return MessageChatUpgradeTo.fromJson(this);
      case 'messageChatUpgradeFrom':
        return MessageChatUpgradeFrom.fromJson(this);
      case 'messagePinMessage':
        return MessagePinMessage.fromJson(this);
      case 'messageScreenshotTaken':
        return MessageScreenshotTaken.fromJson(this);
      case 'messageChatSetTtl':
        return MessageChatSetTtl.fromJson(this);
      case 'messageCustomServiceAction':
        return MessageCustomServiceAction.fromJson(this);
      case 'messageGameScore':
        return MessageGameScore.fromJson(this);
      case 'messagePaymentSuccessful':
        return MessagePaymentSuccessful.fromJson(this);
      case 'messagePaymentSuccessfulBot':
        return MessagePaymentSuccessfulBot.fromJson(this);
      case 'messageContactRegistered':
        return MessageContactRegistered.fromJson(this);
      case 'messageWebsiteConnected':
        return MessageWebsiteConnected.fromJson(this);
      case 'messagePassportDataSent':
        return MessagePassportDataSent.fromJson(this);
      case 'messagePassportDataReceived':
        return MessagePassportDataReceived.fromJson(this);
      case 'messageProximityAlertTriggered':
        return MessageProximityAlertTriggered.fromJson(this);
      case 'messageUnsupported':
        return MessageUnsupported.fromJson(this);
      case 'textEntityType':
        return TextEntityType.fromJson(this);
      case 'textEntityTypeMention':
        return TextEntityTypeMention.fromJson(this);
      case 'textEntityTypeHashtag':
        return TextEntityTypeHashtag.fromJson(this);
      case 'textEntityTypeCashtag':
        return TextEntityTypeCashtag.fromJson(this);
      case 'textEntityTypeBotCommand':
        return TextEntityTypeBotCommand.fromJson(this);
      case 'textEntityTypeUrl':
        return TextEntityTypeUrl.fromJson(this);
      case 'textEntityTypeEmailAddress':
        return TextEntityTypeEmailAddress.fromJson(this);
      case 'textEntityTypePhoneNumber':
        return TextEntityTypePhoneNumber.fromJson(this);
      case 'textEntityTypeBankCardNumber':
        return TextEntityTypeBankCardNumber.fromJson(this);
      case 'textEntityTypeBold':
        return TextEntityTypeBold.fromJson(this);
      case 'textEntityTypeItalic':
        return TextEntityTypeItalic.fromJson(this);
      case 'textEntityTypeUnderline':
        return TextEntityTypeUnderline.fromJson(this);
      case 'textEntityTypeStrikethrough':
        return TextEntityTypeStrikethrough.fromJson(this);
      case 'textEntityTypeCode':
        return TextEntityTypeCode.fromJson(this);
      case 'textEntityTypePre':
        return TextEntityTypePre.fromJson(this);
      case 'textEntityTypePreCode':
        return TextEntityTypePreCode.fromJson(this);
      case 'textEntityTypeTextUrl':
        return TextEntityTypeTextUrl.fromJson(this);
      case 'textEntityTypeMentionName':
        return TextEntityTypeMentionName.fromJson(this);
      case 'inputThumbnail':
        return InputThumbnail.fromJson(this);
      case 'messageSchedulingState':
        return MessageSchedulingState.fromJson(this);
      case 'messageSchedulingStateSendAtDate':
        return MessageSchedulingStateSendAtDate.fromJson(this);
      case 'messageSchedulingStateSendWhenOnline':
        return MessageSchedulingStateSendWhenOnline.fromJson(this);
      case 'messageSendOptions':
        return MessageSendOptions.fromJson(this);
      case 'messageCopyOptions':
        return MessageCopyOptions.fromJson(this);
      case 'inputMessageContent':
        return InputMessageContent.fromJson(this);
      case 'inputMessageText':
        return InputMessageText.fromJson(this);
      case 'inputMessageAnimation':
        return InputMessageAnimation.fromJson(this);
      case 'inputMessageAudio':
        return InputMessageAudio.fromJson(this);
      case 'inputMessageDocument':
        return InputMessageDocument.fromJson(this);
      case 'inputMessagePhoto':
        return InputMessagePhoto.fromJson(this);
      case 'inputMessageSticker':
        return InputMessageSticker.fromJson(this);
      case 'inputMessageVideo':
        return InputMessageVideo.fromJson(this);
      case 'inputMessageVideoNote':
        return InputMessageVideoNote.fromJson(this);
      case 'inputMessageVoiceNote':
        return InputMessageVoiceNote.fromJson(this);
      case 'inputMessageLocation':
        return InputMessageLocation.fromJson(this);
      case 'inputMessageVenue':
        return InputMessageVenue.fromJson(this);
      case 'inputMessageContact':
        return InputMessageContact.fromJson(this);
      case 'inputMessageDice':
        return InputMessageDice.fromJson(this);
      case 'inputMessageGame':
        return InputMessageGame.fromJson(this);
      case 'inputMessageInvoice':
        return InputMessageInvoice.fromJson(this);
      case 'inputMessagePoll':
        return InputMessagePoll.fromJson(this);
      case 'inputMessageForwarded':
        return InputMessageForwarded.fromJson(this);
      case 'searchMessagesFilter':
        return SearchMessagesFilter.fromJson(this);
      case 'searchMessagesFilterEmpty':
        return SearchMessagesFilterEmpty.fromJson(this);
      case 'searchMessagesFilterAnimation':
        return SearchMessagesFilterAnimation.fromJson(this);
      case 'searchMessagesFilterAudio':
        return SearchMessagesFilterAudio.fromJson(this);
      case 'searchMessagesFilterDocument':
        return SearchMessagesFilterDocument.fromJson(this);
      case 'searchMessagesFilterPhoto':
        return SearchMessagesFilterPhoto.fromJson(this);
      case 'searchMessagesFilterVideo':
        return SearchMessagesFilterVideo.fromJson(this);
      case 'searchMessagesFilterVoiceNote':
        return SearchMessagesFilterVoiceNote.fromJson(this);
      case 'searchMessagesFilterPhotoAndVideo':
        return SearchMessagesFilterPhotoAndVideo.fromJson(this);
      case 'searchMessagesFilterUrl':
        return SearchMessagesFilterUrl.fromJson(this);
      case 'searchMessagesFilterChatPhoto':
        return SearchMessagesFilterChatPhoto.fromJson(this);
      case 'searchMessagesFilterCall':
        return SearchMessagesFilterCall.fromJson(this);
      case 'searchMessagesFilterMissedCall':
        return SearchMessagesFilterMissedCall.fromJson(this);
      case 'searchMessagesFilterVideoNote':
        return SearchMessagesFilterVideoNote.fromJson(this);
      case 'searchMessagesFilterVoiceAndVideoNote':
        return SearchMessagesFilterVoiceAndVideoNote.fromJson(this);
      case 'searchMessagesFilterMention':
        return SearchMessagesFilterMention.fromJson(this);
      case 'searchMessagesFilterUnreadMention':
        return SearchMessagesFilterUnreadMention.fromJson(this);
      case 'searchMessagesFilterFailedToSend':
        return SearchMessagesFilterFailedToSend.fromJson(this);
      case 'searchMessagesFilterPinned':
        return SearchMessagesFilterPinned.fromJson(this);
      case 'chatAction':
        return ChatAction.fromJson(this);
      case 'chatActionTyping':
        return ChatActionTyping.fromJson(this);
      case 'chatActionRecordingVideo':
        return ChatActionRecordingVideo.fromJson(this);
      case 'chatActionUploadingVideo':
        return ChatActionUploadingVideo.fromJson(this);
      case 'chatActionRecordingVoiceNote':
        return ChatActionRecordingVoiceNote.fromJson(this);
      case 'chatActionUploadingVoiceNote':
        return ChatActionUploadingVoiceNote.fromJson(this);
      case 'chatActionUploadingPhoto':
        return ChatActionUploadingPhoto.fromJson(this);
      case 'chatActionUploadingDocument':
        return ChatActionUploadingDocument.fromJson(this);
      case 'chatActionChoosingLocation':
        return ChatActionChoosingLocation.fromJson(this);
      case 'chatActionChoosingContact':
        return ChatActionChoosingContact.fromJson(this);
      case 'chatActionStartPlayingGame':
        return ChatActionStartPlayingGame.fromJson(this);
      case 'chatActionRecordingVideoNote':
        return ChatActionRecordingVideoNote.fromJson(this);
      case 'chatActionUploadingVideoNote':
        return ChatActionUploadingVideoNote.fromJson(this);
      case 'chatActionCancel':
        return ChatActionCancel.fromJson(this);
      case 'userStatus':
        return UserStatus.fromJson(this);
      case 'userStatusEmpty':
        return UserStatusEmpty.fromJson(this);
      case 'userStatusOnline':
        return UserStatusOnline.fromJson(this);
      case 'userStatusOffline':
        return UserStatusOffline.fromJson(this);
      case 'userStatusRecently':
        return UserStatusRecently.fromJson(this);
      case 'userStatusLastWeek':
        return UserStatusLastWeek.fromJson(this);
      case 'userStatusLastMonth':
        return UserStatusLastMonth.fromJson(this);
      case 'stickers':
        return Stickers.fromJson(this);
      case 'emojis':
        return Emojis.fromJson(this);
      case 'stickerSet':
        return StickerSet.fromJson(this);
      case 'stickerSetInfo':
        return StickerSetInfo.fromJson(this);
      case 'stickerSets':
        return StickerSets.fromJson(this);
      case 'callDiscardReason':
        return CallDiscardReason.fromJson(this);
      case 'callDiscardReasonEmpty':
        return CallDiscardReasonEmpty.fromJson(this);
      case 'callDiscardReasonMissed':
        return CallDiscardReasonMissed.fromJson(this);
      case 'callDiscardReasonDeclined':
        return CallDiscardReasonDeclined.fromJson(this);
      case 'callDiscardReasonDisconnected':
        return CallDiscardReasonDisconnected.fromJson(this);
      case 'callDiscardReasonHungUp':
        return CallDiscardReasonHungUp.fromJson(this);
      case 'callProtocol':
        return CallProtocol.fromJson(this);
      case 'callServerType':
        return CallServerType.fromJson(this);
      case 'callServerTypeTelegramReflector':
        return CallServerTypeTelegramReflector.fromJson(this);
      case 'callServerTypeWebrtc':
        return CallServerTypeWebrtc.fromJson(this);
      case 'callServer':
        return CallServer.fromJson(this);
      case 'callId':
        return CallId.fromJson(this);
      case 'groupCallId':
        return GroupCallId.fromJson(this);
      case 'callState':
        return CallState.fromJson(this);
      case 'callStatePending':
        return CallStatePending.fromJson(this);
      case 'callStateExchangingKeys':
        return CallStateExchangingKeys.fromJson(this);
      case 'callStateReady':
        return CallStateReady.fromJson(this);
      case 'callStateHangingUp':
        return CallStateHangingUp.fromJson(this);
      case 'callStateDiscarded':
        return CallStateDiscarded.fromJson(this);
      case 'callStateError':
        return CallStateError.fromJson(this);
      case 'groupCallRecentSpeaker':
        return GroupCallRecentSpeaker.fromJson(this);
      case 'groupCall':
        return GroupCall.fromJson(this);
      case 'groupCallPayloadFingerprint':
        return GroupCallPayloadFingerprint.fromJson(this);
      case 'groupCallPayload':
        return GroupCallPayload.fromJson(this);
      case 'groupCallJoinResponseCandidate':
        return GroupCallJoinResponseCandidate.fromJson(this);
      case 'groupCallJoinResponse':
        return GroupCallJoinResponse.fromJson(this);
      case 'groupCallJoinResponseWebrtc':
        return GroupCallJoinResponseWebrtc.fromJson(this);
      case 'groupCallJoinResponseStream':
        return GroupCallJoinResponseStream.fromJson(this);
      case 'groupCallParticipant':
        return GroupCallParticipant.fromJson(this);
      case 'callProblem':
        return CallProblem.fromJson(this);
      case 'callProblemEcho':
        return CallProblemEcho.fromJson(this);
      case 'callProblemNoise':
        return CallProblemNoise.fromJson(this);
      case 'callProblemInterruptions':
        return CallProblemInterruptions.fromJson(this);
      case 'callProblemDistortedSpeech':
        return CallProblemDistortedSpeech.fromJson(this);
      case 'callProblemSilentLocal':
        return CallProblemSilentLocal.fromJson(this);
      case 'callProblemSilentRemote':
        return CallProblemSilentRemote.fromJson(this);
      case 'callProblemDropped':
        return CallProblemDropped.fromJson(this);
      case 'callProblemDistortedVideo':
        return CallProblemDistortedVideo.fromJson(this);
      case 'callProblemPixelatedVideo':
        return CallProblemPixelatedVideo.fromJson(this);
      case 'call':
        return Call.fromJson(this);
      case 'phoneNumberAuthenticationSettings':
        return PhoneNumberAuthenticationSettings.fromJson(this);
      case 'animations':
        return Animations.fromJson(this);
      case 'diceStickers':
        return DiceStickers.fromJson(this);
      case 'diceStickersRegular':
        return DiceStickersRegular.fromJson(this);
      case 'diceStickersSlotMachine':
        return DiceStickersSlotMachine.fromJson(this);
      case 'importedContacts':
        return ImportedContacts.fromJson(this);
      case 'httpUrl':
        return HttpUrl.fromJson(this);
      case 'inputInlineQueryResult':
        return InputInlineQueryResult.fromJson(this);
      case 'inputInlineQueryResultAnimation':
        return InputInlineQueryResultAnimation.fromJson(this);
      case 'inputInlineQueryResultArticle':
        return InputInlineQueryResultArticle.fromJson(this);
      case 'inputInlineQueryResultAudio':
        return InputInlineQueryResultAudio.fromJson(this);
      case 'inputInlineQueryResultContact':
        return InputInlineQueryResultContact.fromJson(this);
      case 'inputInlineQueryResultDocument':
        return InputInlineQueryResultDocument.fromJson(this);
      case 'inputInlineQueryResultGame':
        return InputInlineQueryResultGame.fromJson(this);
      case 'inputInlineQueryResultLocation':
        return InputInlineQueryResultLocation.fromJson(this);
      case 'inputInlineQueryResultPhoto':
        return InputInlineQueryResultPhoto.fromJson(this);
      case 'inputInlineQueryResultSticker':
        return InputInlineQueryResultSticker.fromJson(this);
      case 'inputInlineQueryResultVenue':
        return InputInlineQueryResultVenue.fromJson(this);
      case 'inputInlineQueryResultVideo':
        return InputInlineQueryResultVideo.fromJson(this);
      case 'inputInlineQueryResultVoiceNote':
        return InputInlineQueryResultVoiceNote.fromJson(this);
      case 'inlineQueryResult':
        return InlineQueryResult.fromJson(this);
      case 'inlineQueryResultArticle':
        return InlineQueryResultArticle.fromJson(this);
      case 'inlineQueryResultContact':
        return InlineQueryResultContact.fromJson(this);
      case 'inlineQueryResultLocation':
        return InlineQueryResultLocation.fromJson(this);
      case 'inlineQueryResultVenue':
        return InlineQueryResultVenue.fromJson(this);
      case 'inlineQueryResultGame':
        return InlineQueryResultGame.fromJson(this);
      case 'inlineQueryResultAnimation':
        return InlineQueryResultAnimation.fromJson(this);
      case 'inlineQueryResultAudio':
        return InlineQueryResultAudio.fromJson(this);
      case 'inlineQueryResultDocument':
        return InlineQueryResultDocument.fromJson(this);
      case 'inlineQueryResultPhoto':
        return InlineQueryResultPhoto.fromJson(this);
      case 'inlineQueryResultSticker':
        return InlineQueryResultSticker.fromJson(this);
      case 'inlineQueryResultVideo':
        return InlineQueryResultVideo.fromJson(this);
      case 'inlineQueryResultVoiceNote':
        return InlineQueryResultVoiceNote.fromJson(this);
      case 'inlineQueryResults':
        return InlineQueryResults.fromJson(this);
      case 'callbackQueryPayload':
        return CallbackQueryPayload.fromJson(this);
      case 'callbackQueryPayloadData':
        return CallbackQueryPayloadData.fromJson(this);
      case 'callbackQueryPayloadDataWithPassword':
        return CallbackQueryPayloadDataWithPassword.fromJson(this);
      case 'callbackQueryPayloadGame':
        return CallbackQueryPayloadGame.fromJson(this);
      case 'callbackQueryAnswer':
        return CallbackQueryAnswer.fromJson(this);
      case 'customRequestResult':
        return CustomRequestResult.fromJson(this);
      case 'gameHighScore':
        return GameHighScore.fromJson(this);
      case 'gameHighScores':
        return GameHighScores.fromJson(this);
      case 'chatEventAction':
        return ChatEventAction.fromJson(this);
      case 'chatEventMessageEdited':
        return ChatEventMessageEdited.fromJson(this);
      case 'chatEventMessageDeleted':
        return ChatEventMessageDeleted.fromJson(this);
      case 'chatEventPollStopped':
        return ChatEventPollStopped.fromJson(this);
      case 'chatEventMessagePinned':
        return ChatEventMessagePinned.fromJson(this);
      case 'chatEventMessageUnpinned':
        return ChatEventMessageUnpinned.fromJson(this);
      case 'chatEventMemberJoined':
        return ChatEventMemberJoined.fromJson(this);
      case 'chatEventMemberJoinedByInviteLink':
        return ChatEventMemberJoinedByInviteLink.fromJson(this);
      case 'chatEventMemberLeft':
        return ChatEventMemberLeft.fromJson(this);
      case 'chatEventMemberInvited':
        return ChatEventMemberInvited.fromJson(this);
      case 'chatEventMemberPromoted':
        return ChatEventMemberPromoted.fromJson(this);
      case 'chatEventMemberRestricted':
        return ChatEventMemberRestricted.fromJson(this);
      case 'chatEventTitleChanged':
        return ChatEventTitleChanged.fromJson(this);
      case 'chatEventPermissionsChanged':
        return ChatEventPermissionsChanged.fromJson(this);
      case 'chatEventDescriptionChanged':
        return ChatEventDescriptionChanged.fromJson(this);
      case 'chatEventUsernameChanged':
        return ChatEventUsernameChanged.fromJson(this);
      case 'chatEventPhotoChanged':
        return ChatEventPhotoChanged.fromJson(this);
      case 'chatEventInvitesToggled':
        return ChatEventInvitesToggled.fromJson(this);
      case 'chatEventLinkedChatChanged':
        return ChatEventLinkedChatChanged.fromJson(this);
      case 'chatEventSlowModeDelayChanged':
        return ChatEventSlowModeDelayChanged.fromJson(this);
      case 'chatEventMessageTtlSettingChanged':
        return ChatEventMessageTtlSettingChanged.fromJson(this);
      case 'chatEventSignMessagesToggled':
        return ChatEventSignMessagesToggled.fromJson(this);
      case 'chatEventStickerSetChanged':
        return ChatEventStickerSetChanged.fromJson(this);
      case 'chatEventLocationChanged':
        return ChatEventLocationChanged.fromJson(this);
      case 'chatEventIsAllHistoryAvailableToggled':
        return ChatEventIsAllHistoryAvailableToggled.fromJson(this);
      case 'chatEventInviteLinkEdited':
        return ChatEventInviteLinkEdited.fromJson(this);
      case 'chatEventInviteLinkRevoked':
        return ChatEventInviteLinkRevoked.fromJson(this);
      case 'chatEventInviteLinkDeleted':
        return ChatEventInviteLinkDeleted.fromJson(this);
      case 'chatEventVoiceChatCreated':
        return ChatEventVoiceChatCreated.fromJson(this);
      case 'chatEventVoiceChatDiscarded':
        return ChatEventVoiceChatDiscarded.fromJson(this);
      case 'chatEventVoiceChatParticipantIsMutedToggled':
        return ChatEventVoiceChatParticipantIsMutedToggled.fromJson(this);
      case 'chatEventVoiceChatParticipantVolumeLevelChanged':
        return ChatEventVoiceChatParticipantVolumeLevelChanged.fromJson(this);
      case 'chatEventVoiceChatMuteNewParticipantsToggled':
        return ChatEventVoiceChatMuteNewParticipantsToggled.fromJson(this);
      case 'chatEvent':
        return ChatEvent.fromJson(this);
      case 'chatEvents':
        return ChatEvents.fromJson(this);
      case 'chatEventLogFilters':
        return ChatEventLogFilters.fromJson(this);
      case 'languagePackStringValue':
        return LanguagePackStringValue.fromJson(this);
      case 'languagePackStringValueOrdinary':
        return LanguagePackStringValueOrdinary.fromJson(this);
      case 'languagePackStringValuePluralized':
        return LanguagePackStringValuePluralized.fromJson(this);
      case 'languagePackStringValueDeleted':
        return LanguagePackStringValueDeleted.fromJson(this);
      case 'languagePackString':
        return LanguagePackString.fromJson(this);
      case 'languagePackStrings':
        return LanguagePackStrings.fromJson(this);
      case 'languagePackInfo':
        return LanguagePackInfo.fromJson(this);
      case 'localizationTargetInfo':
        return LocalizationTargetInfo.fromJson(this);
      case 'deviceToken':
        return DeviceToken.fromJson(this);
      case 'deviceTokenFirebaseCloudMessaging':
        return DeviceTokenFirebaseCloudMessaging.fromJson(this);
      case 'deviceTokenApplePush':
        return DeviceTokenApplePush.fromJson(this);
      case 'deviceTokenApplePushVoIP':
        return DeviceTokenApplePushVoIP.fromJson(this);
      case 'deviceTokenWindowsPush':
        return DeviceTokenWindowsPush.fromJson(this);
      case 'deviceTokenMicrosoftPush':
        return DeviceTokenMicrosoftPush.fromJson(this);
      case 'deviceTokenMicrosoftPushVoIP':
        return DeviceTokenMicrosoftPushVoIP.fromJson(this);
      case 'deviceTokenWebPush':
        return DeviceTokenWebPush.fromJson(this);
      case 'deviceTokenSimplePush':
        return DeviceTokenSimplePush.fromJson(this);
      case 'deviceTokenUbuntuPush':
        return DeviceTokenUbuntuPush.fromJson(this);
      case 'deviceTokenBlackBerryPush':
        return DeviceTokenBlackBerryPush.fromJson(this);
      case 'deviceTokenTizenPush':
        return DeviceTokenTizenPush.fromJson(this);
      case 'pushReceiverId':
        return PushReceiverId.fromJson(this);
      case 'backgroundFill':
        return BackgroundFill.fromJson(this);
      case 'backgroundFillSolid':
        return BackgroundFillSolid.fromJson(this);
      case 'backgroundFillGradient':
        return BackgroundFillGradient.fromJson(this);
      case 'backgroundType':
        return BackgroundType.fromJson(this);
      case 'backgroundTypeWallpaper':
        return BackgroundTypeWallpaper.fromJson(this);
      case 'backgroundTypePattern':
        return BackgroundTypePattern.fromJson(this);
      case 'backgroundTypeFill':
        return BackgroundTypeFill.fromJson(this);
      case 'background':
        return Background.fromJson(this);
      case 'backgrounds':
        return Backgrounds.fromJson(this);
      case 'inputBackground':
        return InputBackground.fromJson(this);
      case 'inputBackgroundLocal':
        return InputBackgroundLocal.fromJson(this);
      case 'inputBackgroundRemote':
        return InputBackgroundRemote.fromJson(this);
      case 'hashtags':
        return Hashtags.fromJson(this);
      case 'canTransferOwnershipResult':
        return CanTransferOwnershipResult.fromJson(this);
      case 'canTransferOwnershipResultOk':
        return CanTransferOwnershipResultOk.fromJson(this);
      case 'canTransferOwnershipResultPasswordNeeded':
        return CanTransferOwnershipResultPasswordNeeded.fromJson(this);
      case 'canTransferOwnershipResultPasswordTooFresh':
        return CanTransferOwnershipResultPasswordTooFresh.fromJson(this);
      case 'canTransferOwnershipResultSessionTooFresh':
        return CanTransferOwnershipResultSessionTooFresh.fromJson(this);
      case 'checkChatUsernameResult':
        return CheckChatUsernameResult.fromJson(this);
      case 'checkChatUsernameResultOk':
        return CheckChatUsernameResultOk.fromJson(this);
      case 'checkChatUsernameResultUsernameInvalid':
        return CheckChatUsernameResultUsernameInvalid.fromJson(this);
      case 'checkChatUsernameResultUsernameOccupied':
        return CheckChatUsernameResultUsernameOccupied.fromJson(this);
      case 'checkChatUsernameResultPublicChatsTooMuch':
        return CheckChatUsernameResultPublicChatsTooMuch.fromJson(this);
      case 'checkChatUsernameResultPublicGroupsUnavailable':
        return CheckChatUsernameResultPublicGroupsUnavailable.fromJson(this);
      case 'messageFileType':
        return MessageFileType.fromJson(this);
      case 'messageFileTypePrivate':
        return MessageFileTypePrivate.fromJson(this);
      case 'messageFileTypeGroup':
        return MessageFileTypeGroup.fromJson(this);
      case 'messageFileTypeUnknown':
        return MessageFileTypeUnknown.fromJson(this);
      case 'pushMessageContent':
        return PushMessageContent.fromJson(this);
      case 'pushMessageContentHidden':
        return PushMessageContentHidden.fromJson(this);
      case 'pushMessageContentAnimation':
        return PushMessageContentAnimation.fromJson(this);
      case 'pushMessageContentAudio':
        return PushMessageContentAudio.fromJson(this);
      case 'pushMessageContentContact':
        return PushMessageContentContact.fromJson(this);
      case 'pushMessageContentContactRegistered':
        return PushMessageContentContactRegistered.fromJson(this);
      case 'pushMessageContentDocument':
        return PushMessageContentDocument.fromJson(this);
      case 'pushMessageContentGame':
        return PushMessageContentGame.fromJson(this);
      case 'pushMessageContentGameScore':
        return PushMessageContentGameScore.fromJson(this);
      case 'pushMessageContentInvoice':
        return PushMessageContentInvoice.fromJson(this);
      case 'pushMessageContentLocation':
        return PushMessageContentLocation.fromJson(this);
      case 'pushMessageContentPhoto':
        return PushMessageContentPhoto.fromJson(this);
      case 'pushMessageContentPoll':
        return PushMessageContentPoll.fromJson(this);
      case 'pushMessageContentScreenshotTaken':
        return PushMessageContentScreenshotTaken.fromJson(this);
      case 'pushMessageContentSticker':
        return PushMessageContentSticker.fromJson(this);
      case 'pushMessageContentText':
        return PushMessageContentText.fromJson(this);
      case 'pushMessageContentVideo':
        return PushMessageContentVideo.fromJson(this);
      case 'pushMessageContentVideoNote':
        return PushMessageContentVideoNote.fromJson(this);
      case 'pushMessageContentVoiceNote':
        return PushMessageContentVoiceNote.fromJson(this);
      case 'pushMessageContentBasicGroupChatCreate':
        return PushMessageContentBasicGroupChatCreate.fromJson(this);
      case 'pushMessageContentChatAddMembers':
        return PushMessageContentChatAddMembers.fromJson(this);
      case 'pushMessageContentChatChangePhoto':
        return PushMessageContentChatChangePhoto.fromJson(this);
      case 'pushMessageContentChatChangeTitle':
        return PushMessageContentChatChangeTitle.fromJson(this);
      case 'pushMessageContentChatDeleteMember':
        return PushMessageContentChatDeleteMember.fromJson(this);
      case 'pushMessageContentChatJoinByLink':
        return PushMessageContentChatJoinByLink.fromJson(this);
      case 'pushMessageContentMessageForwards':
        return PushMessageContentMessageForwards.fromJson(this);
      case 'pushMessageContentMediaAlbum':
        return PushMessageContentMediaAlbum.fromJson(this);
      case 'notificationType':
        return NotificationType.fromJson(this);
      case 'notificationTypeNewMessage':
        return NotificationTypeNewMessage.fromJson(this);
      case 'notificationTypeNewSecretChat':
        return NotificationTypeNewSecretChat.fromJson(this);
      case 'notificationTypeNewCall':
        return NotificationTypeNewCall.fromJson(this);
      case 'notificationTypeNewPushMessage':
        return NotificationTypeNewPushMessage.fromJson(this);
      case 'notificationGroupType':
        return NotificationGroupType.fromJson(this);
      case 'notificationGroupTypeMessages':
        return NotificationGroupTypeMessages.fromJson(this);
      case 'notificationGroupTypeMentions':
        return NotificationGroupTypeMentions.fromJson(this);
      case 'notificationGroupTypeSecretChat':
        return NotificationGroupTypeSecretChat.fromJson(this);
      case 'notificationGroupTypeCalls':
        return NotificationGroupTypeCalls.fromJson(this);
      case 'notification':
        return Notification.fromJson(this);
      case 'notificationGroup':
        return NotificationGroup.fromJson(this);
      case 'optionValue':
        return OptionValue.fromJson(this);
      case 'optionValueBoolean':
        return OptionValueBoolean.fromJson(this);
      case 'optionValueEmpty':
        return OptionValueEmpty.fromJson(this);
      case 'optionValueInteger':
        return OptionValueInteger.fromJson(this);
      case 'optionValueString':
        return OptionValueString.fromJson(this);
      case 'jsonObjectMember':
        return JsonObjectMember.fromJson(this);
      case 'jsonValue':
        return JsonValue.fromJson(this);
      case 'jsonValueNull':
        return JsonValueNull.fromJson(this);
      case 'jsonValueBoolean':
        return JsonValueBoolean.fromJson(this);
      case 'jsonValueNumber':
        return JsonValueNumber.fromJson(this);
      case 'jsonValueString':
        return JsonValueString.fromJson(this);
      case 'jsonValueArray':
        return JsonValueArray.fromJson(this);
      case 'jsonValueObject':
        return JsonValueObject.fromJson(this);
      case 'userPrivacySettingRule':
        return UserPrivacySettingRule.fromJson(this);
      case 'userPrivacySettingRuleAllowAll':
        return UserPrivacySettingRuleAllowAll.fromJson(this);
      case 'userPrivacySettingRuleAllowContacts':
        return UserPrivacySettingRuleAllowContacts.fromJson(this);
      case 'userPrivacySettingRuleAllowUsers':
        return UserPrivacySettingRuleAllowUsers.fromJson(this);
      case 'userPrivacySettingRuleAllowChatMembers':
        return UserPrivacySettingRuleAllowChatMembers.fromJson(this);
      case 'userPrivacySettingRuleRestrictAll':
        return UserPrivacySettingRuleRestrictAll.fromJson(this);
      case 'userPrivacySettingRuleRestrictContacts':
        return UserPrivacySettingRuleRestrictContacts.fromJson(this);
      case 'userPrivacySettingRuleRestrictUsers':
        return UserPrivacySettingRuleRestrictUsers.fromJson(this);
      case 'userPrivacySettingRuleRestrictChatMembers':
        return UserPrivacySettingRuleRestrictChatMembers.fromJson(this);
      case 'userPrivacySettingRules':
        return UserPrivacySettingRules.fromJson(this);
      case 'userPrivacySetting':
        return UserPrivacySetting.fromJson(this);
      case 'userPrivacySettingShowStatus':
        return UserPrivacySettingShowStatus.fromJson(this);
      case 'userPrivacySettingShowProfilePhoto':
        return UserPrivacySettingShowProfilePhoto.fromJson(this);
      case 'userPrivacySettingShowLinkInForwardedMessages':
        return UserPrivacySettingShowLinkInForwardedMessages.fromJson(this);
      case 'userPrivacySettingShowPhoneNumber':
        return UserPrivacySettingShowPhoneNumber.fromJson(this);
      case 'userPrivacySettingAllowChatInvites':
        return UserPrivacySettingAllowChatInvites.fromJson(this);
      case 'userPrivacySettingAllowCalls':
        return UserPrivacySettingAllowCalls.fromJson(this);
      case 'userPrivacySettingAllowPeerToPeerCalls':
        return UserPrivacySettingAllowPeerToPeerCalls.fromJson(this);
      case 'userPrivacySettingAllowFindingByPhoneNumber':
        return UserPrivacySettingAllowFindingByPhoneNumber.fromJson(this);
      case 'accountTtl':
        return AccountTtl.fromJson(this);
      case 'session':
        return Session.fromJson(this);
      case 'sessions':
        return Sessions.fromJson(this);
      case 'connectedWebsite':
        return ConnectedWebsite.fromJson(this);
      case 'connectedWebsites':
        return ConnectedWebsites.fromJson(this);
      case 'chatReportReason':
        return ChatReportReason.fromJson(this);
      case 'chatReportReasonSpam':
        return ChatReportReasonSpam.fromJson(this);
      case 'chatReportReasonViolence':
        return ChatReportReasonViolence.fromJson(this);
      case 'chatReportReasonPornography':
        return ChatReportReasonPornography.fromJson(this);
      case 'chatReportReasonChildAbuse':
        return ChatReportReasonChildAbuse.fromJson(this);
      case 'chatReportReasonCopyright':
        return ChatReportReasonCopyright.fromJson(this);
      case 'chatReportReasonUnrelatedLocation':
        return ChatReportReasonUnrelatedLocation.fromJson(this);
      case 'chatReportReasonFake':
        return ChatReportReasonFake.fromJson(this);
      case 'chatReportReasonCustom':
        return ChatReportReasonCustom.fromJson(this);
      case 'messageLink':
        return MessageLink.fromJson(this);
      case 'messageLinkInfo':
        return MessageLinkInfo.fromJson(this);
      case 'filePart':
        return FilePart.fromJson(this);
      case 'fileType':
        return FileType.fromJson(this);
      case 'fileTypeNone':
        return FileTypeNone.fromJson(this);
      case 'fileTypeAnimation':
        return FileTypeAnimation.fromJson(this);
      case 'fileTypeAudio':
        return FileTypeAudio.fromJson(this);
      case 'fileTypeDocument':
        return FileTypeDocument.fromJson(this);
      case 'fileTypePhoto':
        return FileTypePhoto.fromJson(this);
      case 'fileTypeProfilePhoto':
        return FileTypeProfilePhoto.fromJson(this);
      case 'fileTypeSecret':
        return FileTypeSecret.fromJson(this);
      case 'fileTypeSecretThumbnail':
        return FileTypeSecretThumbnail.fromJson(this);
      case 'fileTypeSecure':
        return FileTypeSecure.fromJson(this);
      case 'fileTypeSticker':
        return FileTypeSticker.fromJson(this);
      case 'fileTypeThumbnail':
        return FileTypeThumbnail.fromJson(this);
      case 'fileTypeUnknown':
        return FileTypeUnknown.fromJson(this);
      case 'fileTypeVideo':
        return FileTypeVideo.fromJson(this);
      case 'fileTypeVideoNote':
        return FileTypeVideoNote.fromJson(this);
      case 'fileTypeVoiceNote':
        return FileTypeVoiceNote.fromJson(this);
      case 'fileTypeWallpaper':
        return FileTypeWallpaper.fromJson(this);
      case 'storageStatisticsByFileType':
        return StorageStatisticsByFileType.fromJson(this);
      case 'storageStatisticsByChat':
        return StorageStatisticsByChat.fromJson(this);
      case 'storageStatistics':
        return StorageStatistics.fromJson(this);
      case 'storageStatisticsFast':
        return StorageStatisticsFast.fromJson(this);
      case 'databaseStatistics':
        return DatabaseStatistics.fromJson(this);
      case 'networkType':
        return NetworkType.fromJson(this);
      case 'networkTypeNone':
        return NetworkTypeNone.fromJson(this);
      case 'networkTypeMobile':
        return NetworkTypeMobile.fromJson(this);
      case 'networkTypeMobileRoaming':
        return NetworkTypeMobileRoaming.fromJson(this);
      case 'networkTypeWiFi':
        return NetworkTypeWiFi.fromJson(this);
      case 'networkTypeOther':
        return NetworkTypeOther.fromJson(this);
      case 'networkStatisticsEntry':
        return NetworkStatisticsEntry.fromJson(this);
      case 'networkStatisticsEntryFile':
        return NetworkStatisticsEntryFile.fromJson(this);
      case 'networkStatisticsEntryCall':
        return NetworkStatisticsEntryCall.fromJson(this);
      case 'networkStatistics':
        return NetworkStatistics.fromJson(this);
      case 'autoDownloadSettings':
        return AutoDownloadSettings.fromJson(this);
      case 'autoDownloadSettingsPresets':
        return AutoDownloadSettingsPresets.fromJson(this);
      case 'connectionState':
        return ConnectionState.fromJson(this);
      case 'connectionStateWaitingForNetwork':
        return ConnectionStateWaitingForNetwork.fromJson(this);
      case 'connectionStateConnectingToProxy':
        return ConnectionStateConnectingToProxy.fromJson(this);
      case 'connectionStateConnecting':
        return ConnectionStateConnecting.fromJson(this);
      case 'connectionStateUpdating':
        return ConnectionStateUpdating.fromJson(this);
      case 'connectionStateReady':
        return ConnectionStateReady.fromJson(this);
      case 'topChatCategory':
        return TopChatCategory.fromJson(this);
      case 'topChatCategoryUsers':
        return TopChatCategoryUsers.fromJson(this);
      case 'topChatCategoryBots':
        return TopChatCategoryBots.fromJson(this);
      case 'topChatCategoryGroups':
        return TopChatCategoryGroups.fromJson(this);
      case 'topChatCategoryChannels':
        return TopChatCategoryChannels.fromJson(this);
      case 'topChatCategoryInlineBots':
        return TopChatCategoryInlineBots.fromJson(this);
      case 'topChatCategoryCalls':
        return TopChatCategoryCalls.fromJson(this);
      case 'topChatCategoryForwardChats':
        return TopChatCategoryForwardChats.fromJson(this);
      case 'tMeUrlType':
        return TMeUrlType.fromJson(this);
      case 'tMeUrlTypeUser':
        return TMeUrlTypeUser.fromJson(this);
      case 'tMeUrlTypeSupergroup':
        return TMeUrlTypeSupergroup.fromJson(this);
      case 'tMeUrlTypeChatInvite':
        return TMeUrlTypeChatInvite.fromJson(this);
      case 'tMeUrlTypeStickerSet':
        return TMeUrlTypeStickerSet.fromJson(this);
      case 'tMeUrl':
        return TMeUrl.fromJson(this);
      case 'tMeUrls':
        return TMeUrls.fromJson(this);
      case 'suggestedAction':
        return SuggestedAction.fromJson(this);
      case 'suggestedActionEnableArchiveAndMuteNewChats':
        return SuggestedActionEnableArchiveAndMuteNewChats.fromJson(this);
      case 'suggestedActionCheckPhoneNumber':
        return SuggestedActionCheckPhoneNumber.fromJson(this);
      case 'suggestedActionSeeTicksHint':
        return SuggestedActionSeeTicksHint.fromJson(this);
      case 'suggestedActionConvertToBroadcastGroup':
        return SuggestedActionConvertToBroadcastGroup.fromJson(this);
      case 'count':
        return Count.fromJson(this);
      case 'text':
        return Text.fromJson(this);
      case 'seconds':
        return Seconds.fromJson(this);
      case 'deepLinkInfo':
        return DeepLinkInfo.fromJson(this);
      case 'textParseMode':
        return TextParseMode.fromJson(this);
      case 'textParseModeMarkdown':
        return TextParseModeMarkdown.fromJson(this);
      case 'textParseModeHTML':
        return TextParseModeHTML.fromJson(this);
      case 'proxyType':
        return ProxyType.fromJson(this);
      case 'proxyTypeSocks5':
        return ProxyTypeSocks5.fromJson(this);
      case 'proxyTypeHttp':
        return ProxyTypeHttp.fromJson(this);
      case 'proxyTypeMtproto':
        return ProxyTypeMtproto.fromJson(this);
      case 'proxy':
        return Proxy.fromJson(this);
      case 'proxies':
        return Proxies.fromJson(this);
      case 'inputSticker':
        return InputSticker.fromJson(this);
      case 'inputStickerStatic':
        return InputStickerStatic.fromJson(this);
      case 'inputStickerAnimated':
        return InputStickerAnimated.fromJson(this);
      case 'dateRange':
        return DateRange.fromJson(this);
      case 'statisticalValue':
        return StatisticalValue.fromJson(this);
      case 'statisticalGraph':
        return StatisticalGraph.fromJson(this);
      case 'statisticalGraphData':
        return StatisticalGraphData.fromJson(this);
      case 'statisticalGraphAsync':
        return StatisticalGraphAsync.fromJson(this);
      case 'statisticalGraphError':
        return StatisticalGraphError.fromJson(this);
      case 'chatStatisticsMessageInteractionInfo':
        return ChatStatisticsMessageInteractionInfo.fromJson(this);
      case 'chatStatisticsMessageSenderInfo':
        return ChatStatisticsMessageSenderInfo.fromJson(this);
      case 'chatStatisticsAdministratorActionsInfo':
        return ChatStatisticsAdministratorActionsInfo.fromJson(this);
      case 'chatStatisticsInviterInfo':
        return ChatStatisticsInviterInfo.fromJson(this);
      case 'chatStatistics':
        return ChatStatistics.fromJson(this);
      case 'chatStatisticsSupergroup':
        return ChatStatisticsSupergroup.fromJson(this);
      case 'chatStatisticsChannel':
        return ChatStatisticsChannel.fromJson(this);
      case 'messageStatistics':
        return MessageStatistics.fromJson(this);
      case 'point':
        return Point.fromJson(this);
      case 'vectorPathCommand':
        return VectorPathCommand.fromJson(this);
      case 'vectorPathCommandLine':
        return VectorPathCommandLine.fromJson(this);
      case 'vectorPathCommandCubicBezierCurve':
        return VectorPathCommandCubicBezierCurve.fromJson(this);
      case 'update':
        return Update.fromJson(this);
      case 'updateAuthorizationState':
        return UpdateAuthorizationState.fromJson(this);
      case 'updateNewMessage':
        return UpdateNewMessage.fromJson(this);
      case 'updateMessageSendAcknowledged':
        return UpdateMessageSendAcknowledged.fromJson(this);
      case 'updateMessageSendSucceeded':
        return UpdateMessageSendSucceeded.fromJson(this);
      case 'updateMessageSendFailed':
        return UpdateMessageSendFailed.fromJson(this);
      case 'updateMessageContent':
        return UpdateMessageContent.fromJson(this);
      case 'updateMessageEdited':
        return UpdateMessageEdited.fromJson(this);
      case 'updateMessageIsPinned':
        return UpdateMessageIsPinned.fromJson(this);
      case 'updateMessageInteractionInfo':
        return UpdateMessageInteractionInfo.fromJson(this);
      case 'updateMessageContentOpened':
        return UpdateMessageContentOpened.fromJson(this);
      case 'updateMessageMentionRead':
        return UpdateMessageMentionRead.fromJson(this);
      case 'updateMessageLiveLocationViewed':
        return UpdateMessageLiveLocationViewed.fromJson(this);
      case 'updateNewChat':
        return UpdateNewChat.fromJson(this);
      case 'updateChatTitle':
        return UpdateChatTitle.fromJson(this);
      case 'updateChatPhoto':
        return UpdateChatPhoto.fromJson(this);
      case 'updateChatPermissions':
        return UpdateChatPermissions.fromJson(this);
      case 'updateChatLastMessage':
        return UpdateChatLastMessage.fromJson(this);
      case 'updateChatPosition':
        return UpdateChatPosition.fromJson(this);
      case 'updateChatIsMarkedAsUnread':
        return UpdateChatIsMarkedAsUnread.fromJson(this);
      case 'updateChatIsBlocked':
        return UpdateChatIsBlocked.fromJson(this);
      case 'updateChatHasScheduledMessages':
        return UpdateChatHasScheduledMessages.fromJson(this);
      case 'updateChatVoiceChat':
        return UpdateChatVoiceChat.fromJson(this);
      case 'updateChatDefaultDisableNotification':
        return UpdateChatDefaultDisableNotification.fromJson(this);
      case 'updateChatReadInbox':
        return UpdateChatReadInbox.fromJson(this);
      case 'updateChatReadOutbox':
        return UpdateChatReadOutbox.fromJson(this);
      case 'updateChatUnreadMentionCount':
        return UpdateChatUnreadMentionCount.fromJson(this);
      case 'updateChatNotificationSettings':
        return UpdateChatNotificationSettings.fromJson(this);
      case 'updateScopeNotificationSettings':
        return UpdateScopeNotificationSettings.fromJson(this);
      case 'updateChatMessageTtlSetting':
        return UpdateChatMessageTtlSetting.fromJson(this);
      case 'updateChatActionBar':
        return UpdateChatActionBar.fromJson(this);
      case 'updateChatReplyMarkup':
        return UpdateChatReplyMarkup.fromJson(this);
      case 'updateChatDraftMessage':
        return UpdateChatDraftMessage.fromJson(this);
      case 'updateChatFilters':
        return UpdateChatFilters.fromJson(this);
      case 'updateChatOnlineMemberCount':
        return UpdateChatOnlineMemberCount.fromJson(this);
      case 'updateNotification':
        return UpdateNotification.fromJson(this);
      case 'updateNotificationGroup':
        return UpdateNotificationGroup.fromJson(this);
      case 'updateActiveNotifications':
        return UpdateActiveNotifications.fromJson(this);
      case 'updateHavePendingNotifications':
        return UpdateHavePendingNotifications.fromJson(this);
      case 'updateDeleteMessages':
        return UpdateDeleteMessages.fromJson(this);
      case 'updateUserChatAction':
        return UpdateUserChatAction.fromJson(this);
      case 'updateUserStatus':
        return UpdateUserStatus.fromJson(this);
      case 'updateUser':
        return UpdateUser.fromJson(this);
      case 'updateBasicGroup':
        return UpdateBasicGroup.fromJson(this);
      case 'updateSupergroup':
        return UpdateSupergroup.fromJson(this);
      case 'updateSecretChat':
        return UpdateSecretChat.fromJson(this);
      case 'updateUserFullInfo':
        return UpdateUserFullInfo.fromJson(this);
      case 'updateBasicGroupFullInfo':
        return UpdateBasicGroupFullInfo.fromJson(this);
      case 'updateSupergroupFullInfo':
        return UpdateSupergroupFullInfo.fromJson(this);
      case 'updateServiceNotification':
        return UpdateServiceNotification.fromJson(this);
      case 'updateFile':
        return UpdateFile.fromJson(this);
      case 'updateFileGenerationStart':
        return UpdateFileGenerationStart.fromJson(this);
      case 'updateFileGenerationStop':
        return UpdateFileGenerationStop.fromJson(this);
      case 'updateCall':
        return UpdateCall.fromJson(this);
      case 'updateGroupCall':
        return UpdateGroupCall.fromJson(this);
      case 'updateGroupCallParticipant':
        return UpdateGroupCallParticipant.fromJson(this);
      case 'updateNewCallSignalingData':
        return UpdateNewCallSignalingData.fromJson(this);
      case 'updateUserPrivacySettingRules':
        return UpdateUserPrivacySettingRules.fromJson(this);
      case 'updateUnreadMessageCount':
        return UpdateUnreadMessageCount.fromJson(this);
      case 'updateUnreadChatCount':
        return UpdateUnreadChatCount.fromJson(this);
      case 'updateOption':
        return UpdateOption.fromJson(this);
      case 'updateStickerSet':
        return UpdateStickerSet.fromJson(this);
      case 'updateInstalledStickerSets':
        return UpdateInstalledStickerSets.fromJson(this);
      case 'updateTrendingStickerSets':
        return UpdateTrendingStickerSets.fromJson(this);
      case 'updateRecentStickers':
        return UpdateRecentStickers.fromJson(this);
      case 'updateFavoriteStickers':
        return UpdateFavoriteStickers.fromJson(this);
      case 'updateSavedAnimations':
        return UpdateSavedAnimations.fromJson(this);
      case 'updateSelectedBackground':
        return UpdateSelectedBackground.fromJson(this);
      case 'updateLanguagePackStrings':
        return UpdateLanguagePackStrings.fromJson(this);
      case 'updateConnectionState':
        return UpdateConnectionState.fromJson(this);
      case 'updateTermsOfService':
        return UpdateTermsOfService.fromJson(this);
      case 'updateUsersNearby':
        return UpdateUsersNearby.fromJson(this);
      case 'updateDiceEmojis':
        return UpdateDiceEmojis.fromJson(this);
      case 'updateAnimationSearchParameters':
        return UpdateAnimationSearchParameters.fromJson(this);
      case 'updateSuggestedActions':
        return UpdateSuggestedActions.fromJson(this);
      case 'updateNewInlineQuery':
        return UpdateNewInlineQuery.fromJson(this);
      case 'updateNewChosenInlineResult':
        return UpdateNewChosenInlineResult.fromJson(this);
      case 'updateNewCallbackQuery':
        return UpdateNewCallbackQuery.fromJson(this);
      case 'updateNewInlineCallbackQuery':
        return UpdateNewInlineCallbackQuery.fromJson(this);
      case 'updateNewShippingQuery':
        return UpdateNewShippingQuery.fromJson(this);
      case 'updateNewPreCheckoutQuery':
        return UpdateNewPreCheckoutQuery.fromJson(this);
      case 'updateNewCustomEvent':
        return UpdateNewCustomEvent.fromJson(this);
      case 'updateNewCustomQuery':
        return UpdateNewCustomQuery.fromJson(this);
      case 'updatePoll':
        return UpdatePoll.fromJson(this);
      case 'updatePollAnswer':
        return UpdatePollAnswer.fromJson(this);
      case 'updateChatMember':
        return UpdateChatMember.fromJson(this);
      case 'updates':
        return Updates.fromJson(this);
      case 'logStream':
        return LogStream.fromJson(this);
      case 'logStreamDefault':
        return LogStreamDefault.fromJson(this);
      case 'logStreamFile':
        return LogStreamFile.fromJson(this);
      case 'logStreamEmpty':
        return LogStreamEmpty.fromJson(this);
      case 'logVerbosityLevel':
        return LogVerbosityLevel.fromJson(this);
      case 'logTags':
        return LogTags.fromJson(this);
      case 'testInt':
        return TestInt.fromJson(this);
      case 'testString':
        return TestString.fromJson(this);
      case 'testBytes':
        return TestBytes.fromJson(this);
      case 'testVectorInt':
        return TestVectorInt.fromJson(this);
      case 'testVectorIntObject':
        return TestVectorIntObject.fromJson(this);
      case 'testVectorString':
        return TestVectorString.fromJson(this);
      case 'testVectorStringObject':
        return TestVectorStringObject.fromJson(this);
      default:
        return null;
    }
  }
}
